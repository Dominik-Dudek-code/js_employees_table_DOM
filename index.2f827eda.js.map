{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,C,C,E,O,A,S,C,E,G,M,O,C,G,O,C,E,I,A,S,C,C,C,E,I,E,E,E,A,M,E,K,A,a,O,Q,C,C,O,Q,C,E,C,C,a,C,G,A,M,G,I,E,E,C,E,C,E,E,C,E,G,C,I,E,E,I,C,G,C,C,E,A,C,E,E,I,E,E,I,A,I,E,I,C,E,K,E,C,G,E,M,G,G,E,C,G,C,M,E,C,E,C,E,E,C,Q,C,G,C,G,A,M,E,M,E,E,M,E,Q,C,G,E,M,C,C,C,O,E,E,E,I,E,E,I,A,W,M,A,U,6I,G,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,E,I,A,W,M,A,U,wI,G,C,S,E,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,CCGA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAO,SAAS,aAAa,CAAC,SAC9B,EAAO,SAAS,aAAa,CAAC,QAGpC,CAAA,EAAK,KAAK,CAAC,UAAU,CAAG,OACxB,EAAK,KAAK,CAAC,UAAU,CAAG,OAKxB,IAAK,IAFD,EAAS,EAEJ,EAAI,EAAG,EAAI,EAAM,IAAI,CAAC,MAAM,CAAE,IAAK,CAE1C,IAAM,EAAS,AADH,EAAM,IAAI,CAAC,EAAE,CACN,UAAU,CAAC,GAI9B,GAFA,EAAS,EAAM,IAAI,CAAC,MAAM,CAAG,EAEzB,AAAM,IAAN,GAAW,IAAM,EAAM,IAAI,CAAC,MAAM,CAAG,EAAG,CAC1C,IAAM,EAAQ,SAAS,aAAa,CAAC,MAErC,EAAO,WAAW,CAAC,GACnB,EAAM,WAAW,CAAG,IACtB,CAEI,IAAM,EAAM,IAAI,CAAC,MAAM,CAAG,GAAK,AAAM,IAAN,GACjC,CAAA,EAAO,WAAW,CAAG,CAAA,CAEzB,CAlBA,IAqBM,EAAoB,CACxB,gBAA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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// select all table pieces\nvar table = document.querySelector(\"table\");\nvar rows = document.querySelector(\"tbody\");\nvar head = document.querySelector(\"thead\");\n// prevent selecting text\nhead.style.userSelect = \"none\";\nrows.style.userSelect = \"none\";\n// appending ID column;\nvar lastId = 0;\nfor(var i = 0; i < table.rows.length; i++){\n    var row = table.rows[i];\n    var idCell = row.insertCell(0);\n    lastId = table.rows.length - 1;\n    if (i === 0 || i === table.rows.length - 1) {\n        var title = document.createElement(\"th\");\n        idCell.replaceWith(title);\n        title.textContent = \"ID\";\n    }\n    if (i !== table.rows.length - 1 && i !== 0) idCell.textContent = i;\n}\n// sorting parameters\nvar sortingParameters = {\n    lastClickedCell: null,\n    sortOrder: \"asc\",\n    get sortingName () {\n        return this.lastClickedCell;\n    },\n    set sortingName (value){\n        return this.lastClickedCell = value.textContent.toLowerCase();\n    }\n};\n// column types\nvar columnIndexMap = {};\nhead.querySelectorAll(\"th\").forEach(function(cell, index) {\n    var columnName = cell.textContent.trim().toLowerCase();\n    columnIndexMap[columnName] = index;\n});\n// event for sorting\ntable.addEventListener(\"click\", function(e) {\n    if (e.target.nodeName !== \"TH\" || e.target.closest(\"thead\") === null) return;\n    var sortBy = e.target.textContent.toLowerCase();\n    if (sortBy === sortingParameters.lastClickedCell) sortingParameters.sortOrder = sortingParameters.sortOrder === \"asc\" ? \"desc\" : \"asc\";\n    else sortingParameters.sortOrder = \"asc\";\n    sortingTable(rows, sortBy, sortingParameters.sortOrder);\n    sortingParameters.sortingName = e.target;\n});\n// function for sorting\nfunction sortingTable(item, sortBy, order) {\n    var _item;\n    var columnIndex = columnIndexMap[sortBy];\n    var sortedArray = _to_consumable_array(item.rows).sort(function(rowA, rowB) {\n        var cellA = rowA.cells[columnIndex].textContent;\n        var cellB = rowB.cells[columnIndex].textContent;\n        var comparison;\n        switch(sortBy){\n            case \"age\":\n                comparison = cellA - cellB;\n                break;\n            case \"id\":\n                comparison = cellA - cellB;\n                break;\n            case \"salary\":\n                comparison = formattedSalary(cellA) - formattedSalary(cellB);\n                break;\n            default:\n                comparison = cellA.localeCompare(cellB);\n                break;\n        }\n        return order === \"asc\" ? comparison : -comparison;\n    });\n    (_item = item).replaceChildren.apply(_item, _to_consumable_array(sortedArray));\n}\n// function for replacing salary\nfunction formattedSalary(salary) {\n    return Number(salary.replace(/[,$]/g, \"\"));\n}\n// event for selecting\nvar currentSelected = null;\ndocument.addEventListener(\"click\", function(e) {\n    var row = e.target.closest(\"tr\");\n    if (e.target.closest(\".modal\")) return;\n    if (!row || row.parentElement.tagName !== \"TBODY\") {\n        removeSelect();\n        return;\n    }\n    if (currentSelected !== row) {\n        removeSelect();\n        currentSelected = row;\n        currentSelected.classList.add(\"active\");\n        var deleteIcon = document.createElement(\"span\");\n        deleteIcon.textContent = \"\\u2716\\uFE0F\";\n        deleteIcon.className = \"delete-button\";\n        deleteIcon.addEventListener(\"click\", function(evnt) {\n            evnt.stopPropagation();\n            var modal = document.querySelector(\".modal\");\n            modal.classList.remove(\"hidden\");\n            modal.addEventListener(\"click\", function(answer) {\n                if (answer.target.textContent === \"Yes\") {\n                    answer.stopPropagation();\n                    modal.classList.add(\"hidden\");\n                    deleteIcon.style.zIndex = \"-1\";\n                    deleteIcon.classList.remove(\"active\");\n                    setTimeout(function() {\n                        row.remove();\n                        currentSelected = null;\n                    }, 200);\n                    setTimeout(function() {\n                        createNotification(\"success\", \"Succesfully deleted employee!\");\n                    }, 200);\n                }\n                if (answer.target.textContent === \"No\") modal.classList.add(\"hidden\");\n            }, {\n                once: true\n            });\n        });\n        row.appendChild(deleteIcon);\n        setTimeout(function() {\n            return deleteIcon.classList.add(\"active\");\n        }, 0);\n        setTimeout(function() {\n            if (currentSelected === row) deleteIcon.style.zIndex = \"1\";\n        }, 250);\n    }\n});\n// function removing selected\nfunction removeSelect() {\n    if (currentSelected) {\n        var deleteIcon = currentSelected.querySelector(\".delete-button\");\n        if (deleteIcon) {\n            deleteIcon.classList.remove(\"active\");\n            deleteIcon.style.zIndex = \"-1\";\n            setTimeout(function() {\n                return deleteIcon.remove();\n            }, 200);\n            currentSelected.classList.remove(\"active\");\n            currentSelected = null;\n        }\n    }\n}\n// creating form\nvar form = document.createElement(\"form\");\nform.classList.add(\"new-employee-form\");\ndocument.body.appendChild(form);\n// select options\nvar availableOffices = [\n    \"Tokyo\",\n    \"Singapore\",\n    \"London\",\n    \"New York\",\n    \"Edinburgh\",\n    \"San Francisco\"\n];\n// function for creating form\nfunction createForm() {\n    for(var fieldName in columnIndexMap){\n        var fieldType = getFieldType(fieldName);\n        if (fieldName === \"id\") continue;\n        if (fieldType === \"select\") {\n            createFormSelect(fieldName, availableOffices);\n            continue;\n        }\n        createFormInput(fieldName, fieldType);\n    }\n}\ncreateForm();\n// getting form type\nfunction getFieldType(field) {\n    if (field === \"age\" || field === \"salary\") return \"number\";\n    if (field === \"office\") return \"select\";\n    return \"text\";\n}\n// function for creating select\nfunction createFormSelect(inputName, offices) {\n    var select = document.createElement(\"select\");\n    var label = document.createElement(\"label\");\n    label.textContent = createFirstBigLetter(inputName) + \":\";\n    select.name = inputName;\n    select.dataset.qa = inputName;\n    offices.forEach(function(office) {\n        var option = document.createElement(\"option\");\n        option.value = office;\n        option.textContent = office;\n        select.appendChild(option);\n    });\n    label.appendChild(select);\n    form.appendChild(label);\n}\n// function for creating inputs\nfunction createFormInput(inputName, type) {\n    var label = document.createElement(\"label\");\n    var input = document.createElement(\"input\");\n    label.textContent = createFirstBigLetter(inputName) + \":\";\n    input.type = type;\n    input.name = inputName;\n    input.dataset.qa = inputName;\n    label.appendChild(input);\n    form.appendChild(label);\n}\n// function for creating big letters\nfunction createFirstBigLetter(input) {\n    return input.split(\" \").map(function(word) {\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    }).join(\" \");\n}\n// creating button\nvar button = document.createElement(\"button\");\nbutton.type = \"submit\";\nbutton.textContent = \"Save to table\";\nform.appendChild(button);\n// creating notifications\nfunction createNotification(type, message) {\n    var error = document.querySelector(\".notification\");\n    if (error) document.body.removeChild(error);\n    var notification = document.createElement(\"div\");\n    var notificationTitle = document.createElement(\"h2\");\n    var notificationDescription = document.createElement(\"p\");\n    notification.dataset.qa = \"notification\";\n    notification.classList.add(\"notification\");\n    notification.appendChild(notificationTitle);\n    notification.appendChild(notificationDescription);\n    notificationDescription.textContent = message;\n    notificationTitle.textContent = \"\".concat(createFirstBigLetter(type), \" message:\");\n    notification.classList.add(type);\n    document.body.appendChild(notification);\n    setTimeout(function() {\n        if (document.body.contains(notification)) document.body.removeChild(notification);\n    }, 5000);\n}\n// formatting error\nfunction formatString(input) {\n    var items = input.split(\" \");\n    if (items.length === 1) return \"\".concat(items[0], \" is\");\n    if (items.length === 2) return \"\".concat(items[0], \" and \").concat(items[1], \" are\");\n    var allButLast = items.slice(0, -1).join(\", \");\n    var last = items[items.length - 1];\n    return \"\".concat(allButLast, \" and \").concat(last, \" are\");\n}\n// creating errors\nvar currentError;\nform.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    var formData = new FormData(form);\n    var isEmptyField = false;\n    var whichEmptyField = \"\";\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = formData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _step_value = _sliced_to_array(_step.value, 2), key = _step_value[0], _$value = _step_value[1];\n            if (!_$value.trim()) {\n                isEmptyField = true;\n                whichEmptyField += \"\".concat(key, \" \");\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    if (isEmptyField) {\n        var emptyFields = formatString(whichEmptyField.trim());\n        createNotification(\"error\", \"Failed because \".concat(emptyFields, \" empty, please enter correct value to inputs!\"));\n        return;\n    }\n    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n    try {\n        for(var _iterator1 = formData[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n            var _step_value1 = _sliced_to_array(_step1.value, 2), key1 = _step_value1[0], _$value1 = _step_value1[1];\n            currentError = validate(key1, _$value1);\n            if (currentError) return;\n        }\n    } catch (err) {\n        _didIteratorError1 = true;\n        _iteratorError1 = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                _iterator1.return();\n            }\n        } finally{\n            if (_didIteratorError1) {\n                throw _iteratorError1;\n            }\n        }\n    }\n    createNotification(\"success\", \"New employee has been added to the table!\");\n    // creating employee object for adding row\n    var employeeData = {};\n    for(var field in columnIndexMap)employeeData[field] = formData.get(field);\n    appendNewEmployee(employeeData);\n    if (sortingParameters.lastClickedCell) sortingTable(rows, sortingParameters.lastClickedCell, sortingParameters.sortOrder);\n    form.reset();\n});\n// function for validation\nfunction validate(key, value1) {\n    if (key === \"name\" || key === \"position\") {\n        if (value1.length < 4) {\n            createNotification(\"error\", \"\".concat(createFirstBigLetter(key), \" should be at least 4 letters long!\"));\n            return true;\n        }\n        if (value1.length > 40) {\n            createNotification(\"error\", \"\".concat(createFirstBigLetter(key), \" can't be that long!\"));\n            return true;\n        }\n        if (!/^[a-zA-Z]+(?: [a-zA-Z]+)*$/.test(key)) {\n            createNotification(\"error\", \"\".concat(createFirstBigLetter(key), \" should contain letters, with only one space between words!\"));\n            return true;\n        }\n    }\n    if (key === \"age\") {\n        if (isNaN(Number(value1))) {\n            createNotification(\"error\", \"Age should contain only numbers!\");\n            return true;\n        }\n        if (Number(value1) < 18 || Number(value1) > 90) {\n            createNotification(\"error\", \"Age should be between 18 and 90 years!\");\n            return true;\n        }\n    }\n    return false;\n}\n// appending new employee to table\nfunction appendNewEmployee(employee) {\n    var newRow = rows.insertRow();\n    Object.entries(employee).forEach(function(param) {\n        var _param = _sliced_to_array(param, 2), keyName = _param[0], data = _param[1];\n        var cell = newRow.insertCell();\n        if (keyName === \"id\") {\n            cell.textContent = lastId;\n            lastId++;\n        }\n        if (typeof data === \"string\") cell.textContent = createFirstBigLetter(data.trim());\n        if (keyName === \"salary\") {\n            var formatted = makeSalary(data);\n            cell.textContent = formatted;\n        }\n    });\n}\n// function for making salary\nfunction makeSalary(value1) {\n    return \"$\".concat(Number(value1).toLocaleString(\"en-US\"));\n}\n// event for editing cells\nvar isEditing = false;\nrows.addEventListener(\"dblclick\", function(e) {\n    var cell = e.target.closest(\"td\");\n    if (!cell || cell.parentElement !== currentSelected || isEditing) return;\n    var cellIndex = cell.cellIndex;\n    var headerCell;\n    for(var key in columnIndexMap)if (key === \"id\") headerCell = columnIndexMap[key];\n    if (cellIndex === headerCell) return;\n    var currentText = cell.textContent;\n    cell.textContent = \"\";\n    var computedStyle = window.getComputedStyle(cell);\n    var width = computedStyle.width;\n    var height = computedStyle.height;\n    var cellName = cell.cellIndex;\n    for(var key1 in columnIndexMap)if (columnIndexMap[key1] === cellName) {\n        cellName = key1;\n        break;\n    }\n    var editInput = makeEditInput(cellName, getFieldType(cellName));\n    editInput.className = \"cell-input\";\n    editInput.style.height = height;\n    editInput.style.width = width;\n    editInput.value = currentText;\n    if (cellName === \"salary\") editInput.value = currentText.slice(1).split(\",\").join(\"\");\n    cell.appendChild(editInput);\n    isEditing = true;\n    editInput.focus();\n    editInput.addEventListener(\"blur\", function() {\n        isEditing = false;\n        cell.innerHTML = \"\";\n        var newValue = editInput.value;\n        if (newValue.length <= 0) {\n            cell.textContent = currentText;\n            createNotification(\"warning\", \"Failed, no data passed.\");\n            return;\n        }\n        var validateResult = validate(cellName, newValue);\n        if (validateResult) {\n            cell.textContent = cellName === \"salary\" ? makeSalary(newValue) : currentText;\n            return;\n        }\n        if (cellName === \"salary\") {\n            cell.textContent = makeSalary(newValue);\n            return;\n        }\n        if (getFieldType(cellName) === \"text\") {\n            cell.textContent = createFirstBigLetter(editInput.value);\n            return;\n        }\n        cell.textContent = editInput.value;\n    });\n    editInput.addEventListener(\"keydown\", function(evnt) {\n        if (evnt.key === \"Enter\") editInput.blur();\n    });\n});\n// function for making edit inputs\nfunction makeEditInput(inputName, type) {\n    var typeCreated = type === \"select\" ? \"select\" : \"input\";\n    var formCopy = document.querySelector(\"\".concat(typeCreated, '[name=\"').concat(inputName, '\"]'));\n    var editCell = formCopy.cloneNode(true);\n    return editCell;\n}\n\n//# sourceMappingURL=index.2f827eda.js.map\n","'use strict';\n\n// select all table pieces\nconst table = document.querySelector('table');\nconst rows = document.querySelector('tbody');\nconst head = document.querySelector('thead');\n\n// prevent selecting text\nhead.style.userSelect = 'none';\nrows.style.userSelect = 'none';\n\n// appending ID column;\nlet lastId = 0;\n\nfor (let i = 0; i < table.rows.length; i++) {\n  const row = table.rows[i];\n  const idCell = row.insertCell(0);\n\n  lastId = table.rows.length - 1;\n\n  if (i === 0 || i === table.rows.length - 1) {\n    const title = document.createElement('th');\n\n    idCell.replaceWith(title);\n    title.textContent = 'ID';\n  }\n\n  if (i !== table.rows.length - 1 && i !== 0) {\n    idCell.textContent = i;\n  }\n}\n\n// sorting parameters\nconst sortingParameters = {\n  lastClickedCell: null,\n  sortOrder: 'asc',\n\n  get sortingName() {\n    return this.lastClickedCell;\n  },\n\n  set sortingName(value) {\n    return (this.lastClickedCell = value.textContent.toLowerCase());\n  },\n};\n\n// column types\nconst columnIndexMap = {};\n\nhead.querySelectorAll('th').forEach((cell, index) => {\n  const columnName = cell.textContent.trim().toLowerCase();\n\n  columnIndexMap[columnName] = index;\n});\n\n// event for sorting\ntable.addEventListener('click', (e) => {\n  if (e.target.nodeName !== 'TH' || e.target.closest('thead') === null) {\n    return;\n  }\n\n  const sortBy = e.target.textContent.toLowerCase();\n\n  if (sortBy === sortingParameters.lastClickedCell) {\n    sortingParameters.sortOrder =\n      sortingParameters.sortOrder === 'asc' ? 'desc' : 'asc';\n  } else {\n    sortingParameters.sortOrder = 'asc';\n  }\n\n  sortingTable(rows, sortBy, sortingParameters.sortOrder);\n\n  sortingParameters.sortingName = e.target;\n});\n\n// function for sorting\nfunction sortingTable(item, sortBy, order) {\n  const columnIndex = columnIndexMap[sortBy];\n  const sortedArray = [...item.rows].sort((rowA, rowB) => {\n    const cellA = rowA.cells[columnIndex].textContent;\n    const cellB = rowB.cells[columnIndex].textContent;\n\n    let comparison;\n\n    switch (sortBy) {\n      case 'age':\n        comparison = cellA - cellB;\n        break;\n\n      case 'id':\n        comparison = cellA - cellB;\n        break;\n\n      case 'salary':\n        comparison = formattedSalary(cellA) - formattedSalary(cellB);\n        break;\n\n      default:\n        comparison = cellA.localeCompare(cellB);\n        break;\n    }\n\n    return order === 'asc' ? comparison : -comparison;\n  });\n\n  item.replaceChildren(...sortedArray);\n}\n\n// function for replacing salary\nfunction formattedSalary(salary) {\n  return Number(salary.replace(/[,$]/g, ''));\n}\n\n// event for selecting\nlet currentSelected = null;\n\ndocument.addEventListener('click', (e) => {\n  const row = e.target.closest('tr');\n\n  if (e.target.closest('.modal')) {\n    return;\n  }\n\n  if (!row || row.parentElement.tagName !== 'TBODY') {\n    removeSelect();\n\n    return;\n  }\n\n  if (currentSelected !== row) {\n    removeSelect();\n    currentSelected = row;\n    currentSelected.classList.add('active');\n\n    const deleteIcon = document.createElement('span');\n\n    deleteIcon.textContent = '✖️';\n    deleteIcon.className = 'delete-button';\n\n    deleteIcon.addEventListener('click', (evnt) => {\n      evnt.stopPropagation();\n\n      const modal = document.querySelector('.modal');\n\n      modal.classList.remove('hidden');\n\n      modal.addEventListener(\n        'click',\n        (answer) => {\n          if (answer.target.textContent === 'Yes') {\n            answer.stopPropagation();\n            modal.classList.add('hidden');\n\n            deleteIcon.style.zIndex = '-1';\n            deleteIcon.classList.remove('active');\n\n            setTimeout(() => {\n              row.remove();\n              currentSelected = null;\n            }, 200);\n\n            setTimeout(() => {\n              createNotification('success', 'Succesfully deleted employee!');\n            }, 200);\n          }\n\n          if (answer.target.textContent === 'No') {\n            modal.classList.add('hidden');\n          }\n        },\n        { once: true },\n      );\n    });\n\n    row.appendChild(deleteIcon);\n\n    setTimeout(() => deleteIcon.classList.add('active'), 0);\n\n    setTimeout(() => {\n      if (currentSelected === row) {\n        deleteIcon.style.zIndex = '1';\n      }\n    }, 250);\n  }\n});\n\n// function removing selected\nfunction removeSelect() {\n  if (currentSelected) {\n    const deleteIcon = currentSelected.querySelector('.delete-button');\n\n    if (deleteIcon) {\n      deleteIcon.classList.remove('active');\n      deleteIcon.style.zIndex = '-1';\n      setTimeout(() => deleteIcon.remove(), 200);\n\n      currentSelected.classList.remove('active');\n      currentSelected = null;\n    }\n  }\n}\n\n// creating form\nconst form = document.createElement('form');\n\nform.classList.add('new-employee-form');\n\ndocument.body.appendChild(form);\n\n// select options\nconst availableOffices = [\n  `Tokyo`,\n  `Singapore`,\n  `London`,\n  `New York`,\n  `Edinburgh`,\n  `San Francisco`,\n];\n\n// function for creating form\nfunction createForm() {\n  for (const fieldName in columnIndexMap) {\n    const fieldType = getFieldType(fieldName);\n\n    if (fieldName === 'id') {\n      continue;\n    }\n\n    if (fieldType === 'select') {\n      createFormSelect(fieldName, availableOffices);\n      continue;\n    }\n\n    createFormInput(fieldName, fieldType);\n  }\n}\n\ncreateForm();\n\n// getting form type\nfunction getFieldType(field) {\n  if (field === 'age' || field === 'salary') {\n    return 'number';\n  }\n\n  if (field === 'office') {\n    return 'select';\n  }\n\n  return 'text';\n}\n\n// function for creating select\nfunction createFormSelect(inputName, offices) {\n  const select = document.createElement('select');\n  const label = document.createElement('label');\n\n  label.textContent = createFirstBigLetter(inputName) + ':';\n\n  select.name = inputName;\n  select.dataset.qa = inputName;\n\n  offices.forEach((office) => {\n    const option = document.createElement('option');\n\n    option.value = office;\n    option.textContent = office;\n\n    select.appendChild(option);\n  });\n\n  label.appendChild(select);\n  form.appendChild(label);\n}\n\n// function for creating inputs\nfunction createFormInput(inputName, type) {\n  const label = document.createElement('label');\n  const input = document.createElement('input');\n\n  label.textContent = createFirstBigLetter(inputName) + ':';\n\n  input.type = type;\n  input.name = inputName;\n  input.dataset.qa = inputName;\n\n  label.appendChild(input);\n  form.appendChild(label);\n}\n\n// function for creating big letters\nfunction createFirstBigLetter(input) {\n  return input\n    .split(' ')\n    .map((word) => {\n      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    })\n    .join(' ');\n}\n\n// creating button\nconst button = document.createElement('button');\n\nbutton.type = 'submit';\nbutton.textContent = 'Save to table';\n\nform.appendChild(button);\n\n// creating notifications\nfunction createNotification(type, message) {\n  const error = document.querySelector('.notification');\n\n  if (error) {\n    document.body.removeChild(error);\n  }\n\n  const notification = document.createElement('div');\n  const notificationTitle = document.createElement('h2');\n  const notificationDescription = document.createElement('p');\n\n  notification.dataset.qa = 'notification';\n  notification.classList.add('notification');\n\n  notification.appendChild(notificationTitle);\n  notification.appendChild(notificationDescription);\n\n  notificationDescription.textContent = message;\n\n  notificationTitle.textContent = `${createFirstBigLetter(type)} message:`;\n  notification.classList.add(type);\n\n  document.body.appendChild(notification);\n\n  setTimeout(() => {\n    if (document.body.contains(notification)) {\n      document.body.removeChild(notification);\n    }\n  }, 5000);\n}\n\n// formatting error\nfunction formatString(input) {\n  const items = input.split(' ');\n\n  if (items.length === 1) {\n    return `${items[0]} is`;\n  }\n\n  if (items.length === 2) {\n    return `${items[0]} and ${items[1]} are`;\n  }\n\n  const allButLast = items.slice(0, -1).join(', ');\n  const last = items[items.length - 1];\n\n  return `${allButLast} and ${last} are`;\n}\n\n// creating errors\nlet currentError;\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const formData = new FormData(form);\n\n  let isEmptyField = false;\n  let whichEmptyField = '';\n\n  for (const [key, value] of formData) {\n    if (!value.trim()) {\n      isEmptyField = true;\n      whichEmptyField += `${key} `;\n    }\n  }\n\n  if (isEmptyField) {\n    const emptyFields = formatString(whichEmptyField.trim());\n\n    createNotification(\n      'error',\n      `Failed because ${emptyFields} empty, please enter correct value to inputs!`,\n    );\n\n    return;\n  }\n\n  for (const [key, value] of formData) {\n    currentError = validate(key, value);\n\n    if (currentError) {\n      return;\n    }\n  }\n\n  createNotification('success', 'New employee has been added to the table!');\n\n  // creating employee object for adding row\n  const employeeData = {};\n\n  for (const field in columnIndexMap) {\n    employeeData[field] = formData.get(field);\n  }\n\n  appendNewEmployee(employeeData);\n\n  if (sortingParameters.lastClickedCell) {\n    sortingTable(\n      rows,\n      sortingParameters.lastClickedCell,\n      sortingParameters.sortOrder,\n    );\n  }\n\n  form.reset();\n});\n\n// function for validation\nfunction validate(key, value) {\n  if (key === 'name' || key === 'position') {\n    if (value.length < 4) {\n      createNotification(\n        'error',\n        `${createFirstBigLetter(key)} should be at least 4 letters long!`,\n      );\n\n      return true;\n    }\n\n    if (value.length > 40) {\n      createNotification(\n        'error',\n        `${createFirstBigLetter(key)} can't be that long!`,\n      );\n\n      return true;\n    }\n\n    if (!/^[a-zA-Z]+(?: [a-zA-Z]+)*$/.test(key)) {\n      createNotification(\n        'error',\n        `${createFirstBigLetter(key)} should contain letters, with only one space between words!`,\n      );\n\n      return true;\n    }\n  }\n\n  if (key === 'age') {\n    if (isNaN(Number(value))) {\n      createNotification('error', 'Age should contain only numbers!');\n\n      return true;\n    }\n\n    if (Number(value) < 18 || Number(value) > 90) {\n      createNotification('error', 'Age should be between 18 and 90 years!');\n\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// appending new employee to table\nfunction appendNewEmployee(employee) {\n  const newRow = rows.insertRow();\n\n  Object.entries(employee).forEach(([keyName, data]) => {\n    const cell = newRow.insertCell();\n\n    if (keyName === 'id') {\n      cell.textContent = lastId;\n      lastId++;\n    }\n\n    if (typeof data === 'string') {\n      cell.textContent = createFirstBigLetter(data.trim());\n    }\n\n    if (keyName === 'salary') {\n      const formatted = makeSalary(data);\n\n      cell.textContent = formatted;\n    }\n  });\n}\n\n// function for making salary\nfunction makeSalary(value) {\n  return `$${Number(value).toLocaleString('en-US')}`;\n}\n\n// event for editing cells\nlet isEditing = false;\n\nrows.addEventListener('dblclick', (e) => {\n  const cell = e.target.closest('td');\n\n  if (!cell || cell.parentElement !== currentSelected || isEditing) {\n    return;\n  }\n\n  const cellIndex = cell.cellIndex;\n  let headerCell;\n\n  for (const key in columnIndexMap) {\n    if (key === 'id') {\n      headerCell = columnIndexMap[key];\n    }\n  }\n\n  if (cellIndex === headerCell) {\n    return;\n  }\n\n  const currentText = cell.textContent;\n\n  cell.textContent = '';\n\n  const computedStyle = window.getComputedStyle(cell);\n  const width = computedStyle.width;\n  const height = computedStyle.height;\n\n  let cellName = cell.cellIndex;\n\n  for (const key in columnIndexMap) {\n    if (columnIndexMap[key] === cellName) {\n      cellName = key;\n      break;\n    }\n  }\n\n  const editInput = makeEditInput(cellName, getFieldType(cellName));\n\n  editInput.className = 'cell-input';\n  editInput.style.height = height;\n  editInput.style.width = width;\n  editInput.value = currentText;\n\n  if (cellName === 'salary') {\n    editInput.value = currentText.slice(1).split(',').join('');\n  }\n\n  cell.appendChild(editInput);\n  isEditing = true;\n  editInput.focus();\n\n  editInput.addEventListener('blur', () => {\n    isEditing = false;\n    cell.innerHTML = '';\n\n    const newValue = editInput.value;\n\n    if (newValue.length <= 0) {\n      cell.textContent = currentText;\n      createNotification('warning', 'Failed, no data passed.');\n\n      return;\n    }\n\n    const validateResult = validate(cellName, newValue);\n\n    if (validateResult) {\n      cell.textContent =\n        cellName === 'salary' ? makeSalary(newValue) : currentText;\n\n      return;\n    }\n\n    if (cellName === 'salary') {\n      cell.textContent = makeSalary(newValue);\n\n      return;\n    }\n\n    if (getFieldType(cellName) === 'text') {\n      cell.textContent = createFirstBigLetter(editInput.value);\n\n      return;\n    }\n\n    cell.textContent = editInput.value;\n  });\n\n  editInput.addEventListener('keydown', (evnt) => {\n    if (evnt.key === 'Enter') {\n      editInput.blur();\n    }\n  });\n});\n\n// function for making edit inputs\nfunction makeEditInput(inputName, type) {\n  const typeCreated = type === 'select' ? 'select' : 'input';\n\n  const formCopy = document.querySelector(\n    `${typeCreated}[name=\"${inputName}\"]`,\n  );\n\n  const editCell = formCopy.cloneNode(true);\n\n  return editCell;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_sliced_to_array","_array_with_holes","isArray","_iterable_to_array_limit","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","push","value","err","_unsupported_iterable_to_array","_non_iterable_rest","TypeError","_to_consumable_array","_array_without_holes","_iterable_to_array","iter","from","_non_iterable_spread","o","minLen","n","Object","prototype","toString","slice","constructor","name","test","table","document","querySelector","rows","head","style","userSelect","lastId","idCell","row","insertCell","title","createElement","replaceWith","textContent","sortingParameters","lastClickedCell","sortOrder","sortingName","toLowerCase","columnIndexMap","sortingTable","item","sortBy","order","columnIndex","sortedArray","sort","rowA","rowB","comparison","cellA","cells","cellB","formattedSalary","localeCompare","replaceChildren","apply","salary","Number","replace","querySelectorAll","forEach","cell","index","trim","addEventListener","e","target","nodeName","closest","currentSelected","removeSelect","deleteIcon","classList","remove","zIndex","setTimeout","parentElement","tagName","add","className","evnt","stopPropagation","modal","answer","createNotification","once","appendChild","form","body","availableOffices","getFieldType","field","createFirstBigLetter","input","split","map","word","charAt","toUpperCase","join","createForm","fieldName","fieldType","createFormSelect","inputName","offices","select","label","dataset","qa","office","option","createFormInput","type","button","message","error","removeChild","notification","notificationTitle","notificationDescription","concat","contains","validate","key","value1","isNaN","makeSalary","toLocaleString","preventDefault","formData","FormData","isEmptyField","whichEmptyField","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","_step_value","_$value","return","emptyFields","formatString","items","allButLast","last","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","_step_value1","key1","_$value1","employeeData","get","appendNewEmployee","employee","newRow","insertRow","entries","param","_param","keyName","data","formatted","reset","isEditing","headerCell","cellIndex","currentText","computedStyle","window","getComputedStyle","width","height","cellName","editInput","formCopy","cloneNode","focus","innerHTML","newValue","blur"],"version":3,"file":"index.2f827eda.js.map"}